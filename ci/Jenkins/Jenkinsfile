pipeline {
    agent any

    /* ──────────────── PARAMÈTRES ──────────────── */
    parameters {
        string(name: 'IMAGE_TAG',
               defaultValue: 'v1.0',
               description: 'Tag (minuscule) de l’image Docker à construire & déployer')
    }

    /* ──────────────── VARIABLES GLOBALES ──────────────── */
    environment {
        // dépôt Git
        GIT_REPO        = 'https://github.com/Chapyr/devops-demo-project.git'

        // Docker Hub
        DOCKER_USER     = 'chapyr'
        DOCKER_REPO     = "${DOCKER_USER}/demo-java-app"
        DOCKER_IMAGE    = "${DOCKER_REPO}:${params.IMAGE_TAG.toLowerCase()}"

        // SonarQube
        SONAR_HOST_URL  = 'http://sonarqube:9000'
    }

    stages {

        /* ──────────── 1. Checkout ──────────── */
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: 'github-pat',
                    url: env.GIT_REPO
            }
        }

        /* ──────────── 2. Build & Unit Tests ──────────── */
        stage('Build and Test') {
            steps {
                sh '''
                    cd demo-java-app
                    mvn -B clean package
                '''
            }
        }

        /* ──────────── 3. Analyse SonarQube ──────────── */
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token',
                                        variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd demo-java-app
                        mvn sonar:sonar \
                          -Dsonar.login=${SONAR_AUTH_TOKEN} \
                          -Dsonar.host.url=${SONAR_HOST_URL}
                    '''
                }
            }
        }

        /* ──────────── 4. Build & Push Docker ──────────── */
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                  usernameVariable: 'DH_USER',
                                                  passwordVariable: 'DH_PASS')]) {
                    sh '''
                        cd demo-java-app
                        echo "${DH_PASS}" | docker login -u "${DH_USER}" --password-stdin
                        docker build -t ${DOCKER_IMAGE} .
                        docker push ${DOCKER_IMAGE}
                    '''
                }
            }
        }

        /* ──────────── 5. Mise à jour chart Helm ──────────── */
        stage('Update Deployment File') {
            environment {
                COMMITTER_NAME  = 'Chapyr-CI'
                COMMITTER_EMAIL = 'ci@chapyr.dev'
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-pat',
                                                  usernameVariable: 'GH_USER',
                                                  passwordVariable: 'GH_TOKEN')]) {
                    sh '''
                        # config Git pour le commit automatisé
                        git config user.name  "${COMMITTER_NAME}"
                        git config user.email "${COMMITTER_EMAIL}"

                        # maj du tag dans values.yaml
                        sed -i "s/^ *tag: .*/  tag: \\"${IMAGE_TAG}\\"/" helm/app/values.yaml

                        # commit + push
                        git add helm/app/values.yaml
                        git commit -m "ci: update image tag to ${IMAGE_TAG}" || echo "Rien à commit"
                        git push https://${GH_USER}:${GH_TOKEN}@github.com/Chapyr/devops-demo-project.git HEAD:main
                    '''
                }
            }
        }
    }
}
